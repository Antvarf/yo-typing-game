# Generated by Django 4.1.5 on 2023-01-24 14:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def transfer_player_stats(apps, schema_editor):
    def general_avg_score(p):
        if not p.games_played:
            return 0
        scores = [
            p.avg_classic_score,
            p.avg_ironwall_score,
            p.avg_tugofwar_score,
            p.avg_endless_score,
        ]
        games = [
            p.classic_played,
            p.ironwall_played,
            p.tugofwar_played,
            p.endless_played,
        ]
        return sum(s*x for s,x in zip(scores,games)) // p.games_played

    def best_score(p):
        scores = [
            p.avg_classic_score,
            p.avg_ironwall_score,
            p.avg_tugofwar_score,
            p.avg_endless_score,
        ]
        return max(scores)

    Player = apps.get_model('base', 'Player')
    Stats = apps.get_model('base', 'Stats')
    stats_list = []
    for p in Player.objects.all():
        stats_list.append(Stats(
            mode=None,
            player=p,
            avg_score=general_avg_score(p),
            best_score=best_score(p),
            avg_speed=p.avg_speed,
            best_speed=p.best_speed,
            games_played=p.games_played,
        ))
        stats_list.append(Stats(
            mode='s',
            player=p,
            avg_score=p.avg_classic_score,
            best_score=p.best_classic_score,
            avg_speed=p.avg_speed if p.classic_played else 0,
            best_speed=p.best_speed if p.classic_played else 0,
            games_played=p.classic_played,
        ))
        stats_list.append(Stats(
            mode='i',
            player=p,
            avg_score=p.avg_ironwall_score,
            best_score=p.best_ironwall_score,
            avg_speed=p.avg_speed if p.ironwall_played else 0,
            best_speed=p.best_speed if p.ironwall_played else 0,
            games_played=p.ironwall_played,
        ))
        stats_list.append(Stats(
            mode='t',
            player=p,
            avg_score=p.avg_tugofwar_score,
            best_score=p.best_tugofwar_score,
            avg_speed=p.avg_speed if p.tugofwar_played else 0,
            best_speed=p.best_speed if p.tugofwar_played else 0,
            games_played=p.tugofwar_played,
        ))
        stats_list.append(Stats(
            mode='e',
            player=p,
            avg_score=p.avg_endless_score,
            best_score=p.best_endless_score,
            avg_speed=p.avg_speed if p.endless_played else 0,
            best_speed=p.best_speed if p.endless_played else 0,
            games_played=p.endless_played,
        ))
    Stats.objects.bulk_create(stats_list, batch_size=1000)


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0006_switch_player_user_inheritance_to_composition'),
    ]

    operations = [
        migrations.CreateModel(
            name='Stats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode', models.CharField(choices=[('s', 'single'), ('i', 'ironwall'), ('t', 'tugofwar'), ('e', 'endless')], max_length=1, null=True)),
                ('avg_score', models.IntegerField(default=0)),
                ('best_score', models.IntegerField(default=0)),
                ('avg_speed', models.FloatField(default=0)),
                ('best_speed', models.FloatField(default=0)),
                ('games_played', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.AddConstraint(
            model_name='sessionplayerresult',
            constraint=models.UniqueConstraint(fields=('session', 'player'), name='unique_players_for_game'),
        ),
        migrations.AddField(
            model_name='stats',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stats',
                                    to='base.player'),
        ),
        migrations.AddConstraint(
            model_name='stats',
            constraint=models.UniqueConstraint(fields=('mode', 'player'), name='unique_player_mode_stats'),
        ),
        migrations.RunPython(transfer_player_stats),
        migrations.RemoveField(
            model_name='player',
            name='avg_classic_score',
        ),
        migrations.RemoveField(
            model_name='player',
            name='avg_endless_score',
        ),
        migrations.RemoveField(
            model_name='player',
            name='avg_ironwall_score',
        ),
        migrations.RemoveField(
            model_name='player',
            name='avg_speed',
        ),
        migrations.RemoveField(
            model_name='player',
            name='avg_tugofwar_score',
        ),
        migrations.RemoveField(
            model_name='player',
            name='best_classic_score',
        ),
        migrations.RemoveField(
            model_name='player',
            name='best_endless_score',
        ),
        migrations.RemoveField(
            model_name='player',
            name='best_ironwall_score',
        ),
        migrations.RemoveField(
            model_name='player',
            name='best_speed',
        ),
        migrations.RemoveField(
            model_name='player',
            name='best_tugofwar_score',
        ),
        migrations.RemoveField(
            model_name='player',
            name='classic_played',
        ),
        migrations.RemoveField(
            model_name='player',
            name='endless_played',
        ),
        migrations.RemoveField(
            model_name='player',
            name='games_played',
        ),
        migrations.RemoveField(
            model_name='player',
            name='ironwall_played',
        ),
        migrations.RemoveField(
            model_name='player',
            name='score',
        ),
        migrations.RemoveField(
            model_name='player',
            name='tugofwar_played',
        ),
        migrations.RemoveField(
            model_name='sessionplayerresult',
            name='username',
        ),
    ]